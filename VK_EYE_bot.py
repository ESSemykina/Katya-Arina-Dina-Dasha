import requests
import os
import json
from aiogram.types import ContentTypes, ContentType, Message
from auth_data import token_bot
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from PIL import Image
import emoji
import vk_api

bot = Bot(token=token_bot)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK")


@dp.message_handler()
async def get_user_data(message: types.Message):
    access_token = "vk1.a.VZCTiIKSUiuLOxRA-ljKghO0fKVOIB7dvxvtLJ9rQ8GlKjVTJg7jn2XhA3ucwhgnYjKCVf5EdPEBgKNQ-wfWdTavYvWPU5kiu9U0uHBzJBVh7Kx6jUCEtPTUo_Du26sQSHMCYt2349usjVQ36XYrcOWJp7uSWestxyjqnz-keku3exosRCJCscRalKGNcE3So3mUudL4mjlmaaGZ-NqFeA"

    try:
        id_name = message.text

        params = {
            'user_ids': id_name,
            'fields': 'first_name,last_name,city,country,sex,relation,bdate,universities,status_info,photo_200',
            'access_token': access_token,
            'v': '5.131'
        }
        # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ VK API
        url = 'https://api.vk.com/method/users.get'
        response = requests.get(url, params=params)
        data = response.json()


        # Check if the directory with the user's ID already exists
        id_name = str(data["response"][0]["id"])
        if os.path.exists(id_name):
            print("", end="")
        else:
            os.mkdir(id_name)

        # Save the user's data in a JSON file for better visualization of the structure
        with open(f"{id_name}/{id_name}.json", "w", encoding="utf-8") as file:
            json.dump(data, file, indent=4, ensure_ascii=False)

        user_info = data["response"][0]

        first_name = user_info.get("first_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        last_name = user_info.get("last_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        bdate = user_info.get("bdate", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        gender = user_info.get("sex")
        relation = user_info.get("relation")
        city = user_info.get("city", {}).get("title", "–ù–µ —É–∫–∞–∑–∞–Ω")
        country = user_info.get("country", {}).get("title", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        universities = user_info.get("universities", [])
        photo_url = user_info.get("photo_200")
        # –ó–∞–ø—Ä–æ—Å –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        response = requests.get(
            f"https://api.vk.com/method/users.get?user_ids={id_name}&fields=status&access_token={access_token}&v=5.131")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = response.json()["response"][0]["status"]
        # –ó–∞–ø—Ä–æ—Å –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ


        if gender == 1:
            gender = "–ñ–µ–Ω—Å–∫–∏–π"
        elif gender == 2:
            gender = "–ú—É–∂—Å–∫–æ–π"
        else:
            gender = "–ù–µ —É–∫–∞–∑–∞–Ω"

        if relation == 1:
            relation = "–ù–µ –∂–µ–Ω–∞—Ç/–ù–µ –∑–∞–º—É–∂–µ–º"
        if relation == 2:
            relation = "–ï—Å—Ç—å –¥—Ä—É–≥/ –ø–æ–¥—Ä—É–≥–∞"
        if relation == 3:
            relation = "–ü–æ–º–æ–ª–≤–ª–µ–Ω(–∞)"
        if relation == 4:
            relation = "–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º"
        if relation == 5:
            relation = "–í—Å—ë —Å–ª–æ–∂–Ω–æ"
        if relation == 6:
            relation = "–í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ"
        if relation == 7:
            relation = "–í–ª—é–±–ª–µ–Ω(–∞)"
        if relation == 8:
            relation = "–í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ"
        if relation == 0:
            relation = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        education_info = ""
        if universities:
            for item in universities:
                university_name = item.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                graduation_year = item.get("graduation", "–ù–µ —É–∫–∞–∑–∞–Ω")
                education_info += f" {university_name}\n" \
                                  f"–ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {graduation_year}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–º–æ–¥–∑–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ –∏ –≤—ã–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        status_info= ""

        if   "üòÄ" in status or "üòÉ" in status or "üòÑ" in status or "üòÅ" in status or "üòá" in status or "üôÇ" in status:
            status_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∞—Å—Ç–ª–∏–≤"
        elif "üòí" in status or "üòû" in status or "üòî"in status or "üòü" in status or "‚òπÔ∏è" in status or  "üò£" in status or "üòñ"  in status:
            status_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥—Ä—É—Å—Ç–∏—Ç"
        elif "ü§Æ " in status or "ü§ß" in status  or "üò∑" in status or "ü§í" in status or "ü§ï" in status:
            status_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª–µ–µ—Ç"
        elif "üò†"  in status or "üò°" in status  or "ü§¨" in status:
            status_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–æ–ª"
        elif "üòé"  in status:
            status_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—Ä—É—Ç"
        elif "üò¥" in status or "ü•± "  in status:
            status_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª—é–±–∏—Ç –ø–æ—Å–ø–∞—Ç—å"
        elif "üò¢" in status or "üò≠" in status or "üò∞" in status or "üòì" in status:
            status_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞—á–µ—Ç"
        elif "‚ù§Ô∏è" in status  or " üòò" in status or "üòç" in status or "üíã" in status or "üòö" in status or "ü•∞" in status:
            status_info = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª—é–±–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
        else:
            status_info = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"



        await message.answer(
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_name}\n"
            f"–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {last_name}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {bdate}\n"
            f"–ü–æ–ª: {gender}\n"
            f"–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {relation}\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
            f"–°—Ç—Ä–∞–Ω–∞: {country}\n"
            f"–ú–µ—Å—Ç–æ —É—á–µ–±—ã:{education_info}\n"
            f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:{status_info}\n"
            f"{photo_url}"


        )
        # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        # print(data)


    except Exception as e:
        await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + str(e))




if __name__ == '__main__':
    executor.start_polling(dp)
